generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String               @id @default(uuid())
  username             String               @unique
  email                String               @unique
  password             String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  StarRatingLesson     StarRatingLesson[]
  UserLessonProgresses UserLessonProgress[]
  Comment              Comment[]
  imageUrl             String?
  UserModuleProgress   UserModuleProgress[]
}

model Module {
  id                 Int                  @id @default(autoincrement())
  name               String
  imageUrl           String?
  order              Int?                 @default(0)
  lessons            Lesson[]
  totalLessons       Int                  @default(0)
  archived           Boolean              @default(false)
  UserModuleProgress UserModuleProgress[]
}

model Video {
  id        Int     @id @default(autoincrement())
  url       String
  totalTime Float
  lessonId  Int?
  Lesson    Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId])
}

model Lesson {
  id                   Int                  @id @default(autoincrement())
  name                 String
  description          String
  order                Int
  moduleId             Int
  areCommentsAllowed   Boolean              @default(true)
  videos               Video[]
  module               Module               @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  starRatings          StarRatingLesson[]
  UserLessonProgresses UserLessonProgress[]
  comments             Comment[]
  archived             Boolean              @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([moduleId])
}

model StarRatingLesson {
  id        Int      @id @default(autoincrement())
  rating    Int
  lessonId  Int
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lessonId])
  @@index([userId])
}

model UserLessonProgress {
  id        Int      @id @default(autoincrement())
  progress  Int
  lessonId  Int
  userId    String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lessonId])
  @@index([userId])
}

model UserModuleProgress {
  id               String @id @default(uuid())
  userId           String
  moduleId         Int
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module           Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  completedLessons Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([moduleId])
}

model Comment {
  id                Int     @id @default(autoincrement())
  content           String
  lessonId          Int
  lessonCurrentTime Float?
  userId            String
  revised           Boolean @default(false)
  archived          Boolean @default(false)
  lesson            Lesson  @relation(fields: [lessonId], references: [id])
  user              User    @relation(fields: [userId], references: [id])

  replyToId Int?
  replyTo   Comment?  @relation("replies", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("replies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lessonId])
  @@index([userId])
  @@index([replyToId])
}
